{"version":3,"sources":["components/splash/Splash.module.scss","features/theme/themeSlice.ts","components/navbar/Navbar.tsx","components/splash/Splash.tsx","features/about/About.tsx","features/education/Education.tsx","components/timelineContent/TimelineContent.tsx","features/experience/Experience.tsx","features/home/Home.tsx","App.tsx","app/store.ts","serviceWorker.ts","environments/environments.ts","index.tsx"],"names":["module","exports","counterSlice","createSlice","name","initialState","darkMode","reducers","toggleDarkMode","state","actions","Navbar","navItems","themeType","dispatch","useDispatch","useState","drawerOpen","setDrawerOpen","oppositeTheme","themeSwitch","Typography","Switch","color","onChange","AppBar","position","style","marginBottom","Toolbar","Hidden","mdUp","IconButton","edge","aria-label","onClick","prev","Drawer","anchor","open","onClose","List","width","subheader","ListSubheader","component","id","Divider","map","navItem","to","smooth","offset","duration","ListItem","button","ListItemText","primary","ListItemSecondaryAction","only","Grid","container","justify","spacing","item","Button","Splash","alignItems","alignContent","className","styles","imageContainer","xs","marginTop","variant","header","subHeader","href","target","About","useFirestoreConnect","collection","about","useSelector","firestore","ordered","isLoaded","isEmpty","Object","keys","key","toString","paragraph","Education","orderBy","education","school","dateformat","startDate","toDate","endDate","degree","description","CustomTimelineContent","withStyles","theme","root","breakpoints","up","padding","down","alignRight","paddingLeft","TimelineContent","CustomTimeline","Timeline","Experience","classes","makeStyles","paper","date","useStyles","experience","align","currentItem","TimelineItem","TimelineOppositeContent","current","TimelineSeparator","TimelineDot","Room","TimelineConnector","Paper","elevation","employer","title","Home","Container","maxWidth","Card","raised","CardContent","App","createMuiTheme","palette","type","main","secondary","headerItems","CssBaseline","store","configureStore","reducer","firebase","firebaseReducer","firestoreReducer","themeSlice","Boolean","window","location","hostname","match","environment","production","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","rrfProps","config","createFirestoreInstance","useFirestoreForProfile","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.604471e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageContainer\":\"Splash_imageContainer__3UP6l\",\"header\":\"Splash_header__2og4m\",\"subHeader\":\"Splash_subHeader__2nnaE\"};","import { createSlice } from '@reduxjs/toolkit';\n\ninterface ThemeSlice {\n  darkMode: boolean;\n}\n\nconst initialState: ThemeSlice = { darkMode: true };\n\nconst counterSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode;\n    },\n  },\n});\n\nexport const { toggleDarkMode } = counterSlice.actions;\nexport default counterSlice.reducer;\n","import {\n  AppBar,\n  Button,\n  Grid,\n  Hidden,\n  IconButton,\n  Switch,\n  Toolbar,\n  Typography,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  ListSubheader,\n} from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-scroll';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { toggleDarkMode } from '../../features/theme/themeSlice';\nimport { NavigationItem } from '../../types/components';\n\ninterface INavbar {\n  navItems: NavigationItem[];\n  themeType: 'light' | 'dark';\n}\n\nconst Navbar = ({ navItems, themeType = 'dark' }: INavbar) => {\n  const dispatch = useDispatch();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const oppositeTheme = themeType === 'dark' ? 'light' : 'dark';\n  const themeSwitch = (\n    <>\n      <Typography>Toggle {oppositeTheme} mode</Typography>\n      <Switch\n        color=\"default\"\n        onChange={() => {\n          dispatch(toggleDarkMode());\n        }}\n      />\n    </>\n  );\n  return (\n    <AppBar position=\"static\" color=\"default\" style={{ marginBottom: '24px' }}>\n      <Toolbar>\n        <Hidden mdUp>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => setDrawerOpen((prev) => !prev)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Drawer\n            anchor=\"left\"\n            open={drawerOpen}\n            onClose={() => setDrawerOpen((prev) => !prev)}\n          >\n            <List\n              style={{ width: '250px' }}\n              subheader={\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                  Navigation Menu\n                </ListSubheader>\n              }\n            >\n              <Divider />\n              {navItems &&\n                navItems.map((navItem) => {\n                  return (\n                    <Link to={navItem.name} smooth offset={-10} duration={500}>\n                      <ListItem button key={navItem.name}>\n                        <ListItemText primary={navItem.name} />\n                      </ListItem>\n                    </Link>\n                  );\n                })}\n              <Divider />\n              <ListItem>\n                <ListItemText primary={`Toggle ${oppositeTheme} mode`} />\n                <ListItemSecondaryAction>\n                  <Switch\n                    color=\"default\"\n                    edge=\"end\"\n                    onChange={() => {\n                      dispatch(toggleDarkMode());\n                    }}\n                  />\n                </ListItemSecondaryAction>\n              </ListItem>\n            </List>\n          </Drawer>\n        </Hidden>\n        <Hidden only={['xs', 'sm']}>\n          <Grid container justify=\"center\" spacing={2}>\n            {navItems &&\n              navItems.map((navItem) => {\n                return (\n                  <Grid item key={navItem.name}>\n                    <Link to={navItem.name} smooth offset={-10} duration={500}>\n                      <Button color=\"default\">{navItem.name}</Button>\n                    </Link>\n                  </Grid>\n                );\n              })}\n          </Grid>\n          {themeSwitch}\n        </Hidden>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","import { Grid, Button, Typography } from '@material-ui/core';\nimport React from 'react';\nimport styles from './Splash.module.scss';\n\nconst Splash = () => {\n  return (\n    <Grid\n      container\n      spacing={3}\n      justify=\"center\"\n      alignItems=\"center\"\n      alignContent=\"center\"\n      className={`h-100 w-100 ${styles.imageContainer}`}\n    >\n      <Grid item xs={12} style={{ marginTop: '12px' }}>\n        <Typography variant=\"h1\" className={styles.header}>\n          Coltin Kifer\n        </Typography>\n      </Grid>\n      <Grid item xs={12}>\n        <Typography variant=\"h3\" className={styles.subHeader}>\n          Software Developer\n        </Typography>\n      </Grid>\n      <Grid item xs={12} style={{ marginTop: '16px', marginBottom: '22px' }}>\n        <Button\n          href=\"https://drive.google.com/file/d/1rwV-G0CitpfzOygqH4t3QYaHrDSMAr7R/view?usp=sharing\"\n          target=\"_blank\"\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Open Resume\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Splash;\n","import { Grid, Typography } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { isLoaded, isEmpty, useFirestoreConnect } from 'react-redux-firebase';\nimport React from 'react';\nimport { RootState } from '../../app/store';\n\nexport type IAbout = {\n  paragraph?: string;\n}[];\n\nconst About = () => {\n  useFirestoreConnect([{ collection: 'about' }]);\n\n  const about = useSelector<RootState>(\n    (state) => state.firestore?.ordered?.about\n  ) as IAbout;\n\n  if (!isLoaded(about)) {\n    return <div>Loading...</div>;\n  }\n\n  if (isEmpty(about)) {\n    return <div>About is Empty</div>;\n  }\n\n  return (\n    <>\n      <Grid item xs={12}>\n        <Typography variant=\"h4\">About Me</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        {about &&\n          Object.keys(about).map((key, id) => (\n            <div key={key} id={id.toString()}>\n              <Typography>&emsp;&emsp;{about[id].paragraph}</Typography>\n            </div>\n          ))}\n      </Grid>\n    </>\n  );\n};\n\nexport default About;\n","import { Grid, Typography } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport {\n  isLoaded,\n  isEmpty,\n  useFirestoreConnect,\n  OrderByOptions,\n} from 'react-redux-firebase';\nimport React from 'react';\nimport dateformat from 'dateformat';\nimport { RootState } from '../../app/store';\n\nexport type IEducation = {\n  degree: string;\n  description: string;\n  endDate: firebase.default.firestore.Timestamp;\n  startDate: firebase.default.firestore.Timestamp;\n  school: string;\n  order: number;\n}[];\n\nconst Education = () => {\n  useFirestoreConnect([\n    { collection: 'education', orderBy: ['order', 'asc'] as OrderByOptions },\n  ]);\n\n  // const useStyles = makeStyles((theme) => ({\n  //   paper: {\n  //     [theme.breakpoints.up('sm')]: {\n  //       padding: '6px 16px',\n  //     },\n  //     [theme.breakpoints.down('sm')]: {\n  //       padding: '3px 8px',\n  //     },\n  //   },\n  //   date: {\n  //     marginTop: '12px',\n  //   },\n  // }));\n\n  // const classes = useStyles();\n\n  const education = useSelector<RootState>(\n    (state) => state.firestore?.ordered?.education\n  ) as IEducation;\n\n  if (!isLoaded(education)) {\n    return <div>Loading...</div>;\n  }\n\n  if (isEmpty(education)) {\n    return <div>Education List Is Empty</div>;\n  }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={12}>\n        <Typography variant=\"h4\">Education</Typography>\n      </Grid>\n      <Grid\n        container\n        alignItems=\"center\"\n        justify=\"space-between\"\n        item\n        xs={12}\n        spacing={2}\n      >\n        <Grid item xs={6}>\n          <Typography variant=\"h4\" color=\"textSecondary\">\n            {education[0].school}\n          </Typography>\n        </Grid>\n        <Grid item xs={6}>\n          <Typography variant=\"body1\" color=\"textSecondary\">\n            {`${dateformat(\n              education[0].startDate.toDate(),\n              'mmmm d, yyyy'\n            )} - ${dateformat(education[0].endDate.toDate(), 'mmmm d, yyyy')}`}\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"body1\" color=\"textSecondary\">\n            {education[0].degree}\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <Typography variant=\"body1\" color=\"textSecondary\">\n            {education[0].description}\n          </Typography>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Education;\n","import { withStyles } from '@material-ui/core';\nimport { TimelineContent, Timeline } from '@material-ui/lab';\n\nconst CustomTimelineContent = withStyles((theme) => {\n  return {\n    root: {\n      [theme.breakpoints.up('sm')]: {\n        padding: '6px 16px',\n      },\n      [theme.breakpoints.down('sm')]: {\n        padding: '3px 8px',\n        // padding: '3px 8px',\n      },\n    },\n    alignRight: {\n      [theme.breakpoints.down('sm')]: {\n        paddingLeft: '0px',\n      },\n    },\n  };\n})(TimelineContent);\n\nconst CustomTimeline = withStyles((theme) => {\n  return {\n    root: {\n      [theme.breakpoints.down('sm')]: {\n        padding: '0px',\n      },\n    },\n  };\n})(Timeline);\n\nexport { CustomTimelineContent, CustomTimeline };\n","import { Grid, makeStyles, Paper, Typography } from '@material-ui/core';\nimport { Room } from '@material-ui/icons';\nimport { useSelector } from 'react-redux';\nimport {\n  isLoaded,\n  isEmpty,\n  useFirestoreConnect,\n  OrderByOptions,\n} from 'react-redux-firebase';\nimport React from 'react';\nimport { RootState } from '../../app/store';\nimport {\n  TimelineItem,\n  TimelineOppositeContent,\n  TimelineSeparator,\n  TimelineDot,\n  TimelineConnector,\n} from '@material-ui/lab';\nimport dateformat from 'dateformat';\nimport {\n  CustomTimelineContent,\n  CustomTimeline,\n} from '../../components/timelineContent';\n\nexport type IExperience = {\n  description: string;\n  employer: string;\n  endDate: firebase.default.firestore.Timestamp;\n  startDate: firebase.default.firestore.Timestamp;\n  title: string;\n  order: number;\n  current?: boolean;\n}[];\n\nconst Experience = () => {\n  useFirestoreConnect([\n    { collection: 'experience', orderBy: ['order', 'asc'] as OrderByOptions },\n  ]);\n\n  const useStyles = makeStyles((theme) => ({\n    paper: {\n      [theme.breakpoints.up('sm')]: {\n        padding: '6px 16px',\n      },\n      [theme.breakpoints.down('sm')]: {\n        padding: '3px 8px',\n      },\n    },\n    date: {\n      marginTop: '12px',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const experience = useSelector<RootState>(\n    (state) => state.firestore?.ordered?.experience\n  ) as IExperience;\n\n  if (!isLoaded(experience)) {\n    return <div>Loading...</div>;\n  }\n\n  if (isEmpty(experience)) {\n    return <div>Experience List Is Empty</div>;\n  }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={12}>\n        <Typography variant=\"h4\">Experience</Typography>\n      </Grid>\n      <Grid\n        container\n        alignItems=\"center\"\n        item\n        xs={12}\n        spacing={2}\n        justify=\"center\"\n      >\n        <CustomTimeline align=\"alternate\">\n          {experience &&\n            Object.keys(experience).map((key, id) => {\n              const currentItem = experience[id];\n              return (\n                <TimelineItem key={`timeline-item-${id}`}>\n                  <TimelineOppositeContent>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      className={classes.date}\n                    >\n                      {`${dateformat(\n                        currentItem.startDate.toDate(),\n                        'mmmm d, yyyy'\n                      )} - ${\n                        currentItem.current\n                          ? 'Present'\n                          : dateformat(\n                              currentItem.endDate.toDate(),\n                              'mmmm d, yyyy'\n                            )\n                      }`}\n                    </Typography>\n                  </TimelineOppositeContent>\n                  <TimelineSeparator>\n                    <TimelineDot color=\"primary\">\n                      <Room />\n                    </TimelineDot>\n                    <TimelineConnector />\n                  </TimelineSeparator>\n                  <CustomTimelineContent>\n                    <Paper elevation={3} className={classes.paper}>\n                      <Typography variant=\"h6\" component=\"h1\">\n                        {currentItem.employer}\n                      </Typography>\n                      <Typography color=\"textSecondary\">\n                        {currentItem.title}\n                      </Typography>\n                      <Typography>{currentItem.description}</Typography>\n                    </Paper>\n                  </CustomTimelineContent>\n                </TimelineItem>\n              );\n            })}\n        </CustomTimeline>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Experience;\n","import { Card, Container, Grid, CardContent } from '@material-ui/core';\nimport React from 'react';\nimport { Element } from 'react-scroll';\nimport Splash from '../../components/splash';\nimport About from '../about/About';\nimport Education from '../education';\nimport Experience from '../experience';\n\nconst Home = () => {\n  return (\n    <Container maxWidth=\"lg\">\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs={12}>\n          <Card raised>\n            <Splash />\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          <Element name=\"About\">\n            <Card raised title=\"About\" className=\"text-left\">\n              <CardContent>\n                <About />\n              </CardContent>\n            </Card>\n          </Element>\n        </Grid>\n        <Grid item xs={12}>\n          <Element name=\"Experience\">\n            <Card raised title=\"Experience\" className=\"text-left\">\n              <CardContent>\n                <Experience />\n              </CardContent>\n            </Card>\n          </Element>\n        </Grid>\n        <Grid item xs={12}>\n          <Element name=\"Education\">\n            <Card raised title=\"Education\" className=\"text-left\">\n              <CardContent>\n                <Education />\n              </CardContent>\n            </Card>\n          </Element>\n        </Grid>\n        <Grid item xs={12}>\n          <Element name=\"Projects\">\n            <Card raised title=\"Projects\" className=\"text-left\">\n              <CardContent></CardContent>\n            </Card>\n          </Element>\n        </Grid>\n        <Grid item xs={12}>\n          <Element name=\"Skills\">\n            <Card raised title=\"Skills\" className=\"text-left\">\n              <CardContent></CardContent>\n            </Card>\n          </Element>\n        </Grid>\n        <Grid item xs={12}>\n          <Element name=\"Contact\">\n            <Card raised title=\"Education\" className=\"text-left\">\n              <CardContent></CardContent>\n            </Card>\n          </Element>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Home;\n","import { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { OrderByOptions, useFirestoreConnect } from 'react-redux-firebase';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.scss';\nimport { RootState } from './app/store';\nimport Navbar from './components/navbar/Navbar';\nimport { NavigationItem } from './types/components';\nimport Home from './features/home/Home';\n\nfunction App() {\n  const darkMode = useSelector<RootState>(\n    (state) => state.theme.darkMode\n  ) as NavigationItem[];\n\n  const themeType = darkMode ? 'dark' : 'light';\n  const theme = createMuiTheme({\n    palette: {\n      type: themeType,\n      primary: { main: '#455A64' },\n      secondary: { main: '#00BCD4' },\n    },\n  });\n\n  useFirestoreConnect([\n    { collection: 'headerItems', orderBy: ['index', 'asc'] as OrderByOptions },\n  ]);\n\n  const navItems = useSelector<RootState>(\n    (state) => state.firestore?.ordered?.headerItems\n  ) as NavigationItem[];\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <Navbar navItems={navItems} themeType={themeType} />\n        <Home />\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { firebaseReducer } from 'react-redux-firebase';\nimport { firestoreReducer } from 'redux-firestore';\n// import { IAbout } from '../features/about/About';\nimport themeSlice from '../features/theme/themeSlice';\n\n// interface Schema {\n//   about: IAbout;\n// }\n\n// export interface RootState {\n//   firebase: FirebaseReducer.Reducer<{}, Schema>\n//   // firestore: F\n// }\n\n// const reducers: Reducer<RootState> = {\n//   firebase: firebaseReducer,\n//   firestore: firestoreReducer as Reducer<RootState>,\n//   router: routerReducer\n// };\n\nexport const store = configureStore({\n  reducer: {\n    firebase: firebaseReducer,\n    firestore: firestoreReducer,\n    theme: themeSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const environment = {\n    production: true,\n    firebase: {\n      apiKey: `${process.env.REACT_APP_FIREBASE_KEY}`,\n      authDomain: 'portfolio-a8df4.firebaseapp.com',\n      databaseURL: 'https://portfolio-a8df4.firebaseio.com',\n      projectId: 'portfolio-a8df4',\n      storageBucket: 'portfolio-a8df4.appspot.com',\n      messagingSenderId: '924371232404',\n      appId: '1:924371232404:web:ff5d898070c2426d'\n    }\n  };\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport firebase from 'firebase/app';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'firebase/firestore';\nimport { environment } from './environments/environments';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore';\n\nfirebase.initializeApp(environment.firebase);\nfirebase.firestore();\n\nconst rrfProps = {\n  firebase,\n  config: environment.firebase,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n  useFirestoreForProfile: true,\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider {...rrfProps}>\n        <App />\n      </ReactReduxFirebaseProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}