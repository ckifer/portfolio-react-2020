{"version":3,"sources":["components/splash/Splash.module.scss","features/theme/themeSlice.ts","components/navbar/Navbar.tsx","assets/codePic.jpg","components/splash/Splash.tsx","features/about/About.tsx","features/experience/Experience.tsx","features/home/Home.tsx","App.tsx","app/store.ts","serviceWorker.ts","environments/environments.ts","index.tsx"],"names":["module","exports","counterSlice","createSlice","name","initialState","darkMode","reducers","toggleDarkMode","state","actions","Navbar","navItems","dispatch","useDispatch","useState","drawerOpen","setDrawerOpen","themeSwitch","Typography","Switch","color","onChange","AppBar","position","style","marginBottom","Toolbar","Hidden","mdUp","IconButton","edge","aria-label","onClick","prev","Drawer","anchor","open","onClose","List","width","subheader","ListSubheader","component","id","Divider","map","navItem","ListItem","button","ListItemText","primary","ListItemSecondaryAction","only","Grid","container","justify","spacing","item","Button","Splash","classes","makeStyles","theme","after","top","left","height","display","background","palette","type","className","styles","imageContainer","src","codePic","alt","alignItems","alignContent","xs","variant","header","subHeader","marginTop","href","target","About","useFirestoreConnect","collection","about","useSelector","firestore","ordered","isLoaded","isEmpty","Container","Object","keys","key","toString","paragraph","Experience","orderBy","paper","padding","date","useStyles","experience","Timeline","align","currentItem","TimelineItem","TimelineOppositeContent","dateformat","startDate","toDate","current","endDate","TimelineSeparator","TimelineDot","Room","TimelineConnector","TimelineContent","Paper","elevation","employer","title","description","Home","Card","raised","textAlign","CardContent","App","createMuiTheme","main","secondary","headerItems","CssBaseline","store","configureStore","reducer","firebase","firebaseReducer","firestoreReducer","themeSlice","Boolean","window","location","hostname","match","environment","production","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","rrfProps","config","createFirestoreInstance","useFirestoreForProfile","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,eAAiB,+BAA+B,MAAQ,sBAAsB,OAAS,uBAAuB,UAAY,4B,0XCOtIC,EAAeC,YAAY,CAC/BC,KAAM,QACNC,aAJ+B,CAAEC,UAAU,GAK3CC,SAAU,CACRC,eADQ,SACOC,GACbA,EAAMH,UAAYG,EAAMH,aAKfE,EAAmBN,EAAaQ,QAAhCF,eACAN,IAAf,QC0FeS,EAlFA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SACVC,EAAWC,cADuB,EAEJC,oBAAS,GAFL,mBAEjCC,EAFiC,KAErBC,EAFqB,KAGlCC,EACJ,qCACE,cAACC,EAAA,EAAD,qCACA,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,SAAU,WACRT,EAASL,WAKjB,OACE,cAACe,EAAA,EAAD,CAAQC,SAAS,SAASH,MAAM,UAAUI,MAAO,CAAEC,aAAc,QAAjE,SACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAQC,MAAI,EAAZ,UACE,cAACC,EAAA,EAAD,CACEC,KAAK,QACLV,MAAM,UACNW,aAAW,OACXC,QAAS,kBAAMhB,GAAc,SAACiB,GAAD,OAAWA,MAJ1C,SAME,cAAC,IAAD,MAEF,cAACC,EAAA,EAAD,CACEC,OAAO,OACPC,KAAMrB,EACNsB,QAAS,kBAAMrB,GAAc,SAACiB,GAAD,OAAWA,MAH1C,SAKE,eAACK,EAAA,EAAD,CACEd,MAAO,CAAEe,MAAO,SAChBC,UACE,cAACC,EAAA,EAAD,CAAeC,UAAU,MAAMC,GAAG,wBAAlC,6BAHJ,UAQE,cAACC,EAAA,EAAD,IACCjC,GACCA,EAASkC,KAAI,SAACC,GACZ,OACE,cAACC,EAAA,EAAD,CAAUC,QAAM,EAAhB,SACE,cAACC,EAAA,EAAD,CAAcC,QAASJ,EAAQ3C,QADX2C,EAAQ3C,SAKpC,cAACyC,EAAA,EAAD,IACA,eAACG,EAAA,EAAD,WACE,cAACE,EAAA,EAAD,CAAcC,QAAQ,2BACtB,cAACC,EAAA,EAAD,UACE,cAAChC,EAAA,EAAD,CACEC,MAAM,UACNU,KAAK,MACLT,SAAU,WACRT,EAASL,qBAQvB,eAACoB,EAAA,EAAD,CAAQyB,KAAM,CAAC,KAAM,MAArB,UACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,QAAS,EAA1C,SACG7C,GACCA,EAASkC,KAAI,SAACC,GACZ,OACE,cAACO,EAAA,EAAD,CAAMI,MAAI,EAAV,SACE,cAACC,EAAA,EAAD,CAAQtC,MAAM,UAAd,SAAyB0B,EAAQ3C,QADnB2C,EAAQ3C,WAM/Bc,W,sDCtGI,MAA0B,oCC6D1B0C,EAxDA,WACb,IAAMC,EAAUC,aAAW,SAACC,GAC1B,MAAO,CACLC,MAAO,CACLxC,SAAU,WACVyC,IAAK,EACLC,KAAM,EACN1B,MAAO,OACP2B,OAAQ,qBACR9C,MAAO,OACP+C,QAAS,QACTC,WACyB,SAAvBN,EAAMO,QAAQC,KACV,qBACA,yBAbIT,GAiBhB,OACE,sBAAKU,UAAWC,IAAOC,eAAvB,UACE,qBAAKF,UAAU,cAAcG,IAAKC,EAASC,IAAI,SAC/C,qBAAKL,UAAWX,EAAQG,MAAxB,SACE,eAACV,EAAA,EAAD,CACEC,WAAS,EACTE,QAAS,EACTD,QAAQ,SACRsB,WAAW,SACXC,aAAa,SACbP,UAAU,cANZ,UAQE,cAAClB,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACE,cAAC7D,EAAA,EAAD,CAAY8D,QAAQ,KAAKT,UAAWC,IAAOS,OAA3C,4BAIF,cAAC5B,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACE,cAAC7D,EAAA,EAAD,CAAY8D,QAAQ,KAAKT,UAAWC,IAAOU,UAA3C,kCAIF,cAAC7B,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAIvD,MAAO,CAAE2D,UAAW,QAAvC,SACE,cAACzB,EAAA,EAAD,CACE0B,KAAK,qFACLC,OAAO,SACPjE,MAAM,YACN4D,QAAQ,YAJV,oCCJGM,EAhCD,WACZC,8BAAoB,CAAC,CAAEC,WAAY,WAEnC,IAAMC,EAAQC,aACZ,SAAClF,GAAD,yBAAWA,EAAMmF,iBAAjB,iBAAW,EAAiBC,eAA5B,aAAW,EAA0BH,SAGvC,OAAKI,mBAASJ,GAIVK,kBAAQL,GACH,iDAIP,eAACM,EAAA,EAAD,WACE,cAAC1C,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACE,cAAC7D,EAAA,EAAD,CAAY8D,QAAQ,KAApB,wBAEF,cAAC3B,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACGU,GACCO,OAAOC,KAAKR,GAAO5C,KAAI,SAACqD,EAAKvD,GAAN,OACrB,qBAAeA,GAAIA,EAAGwD,WAAtB,SACE,eAACjF,EAAA,EAAD,0BAAyBuE,EAAM9C,GAAIyD,cAD3BF,WAfX,8C,wGC0GIG,GA5FI,WACjBd,8BAAoB,CAClB,CAAEC,WAAY,aAAcc,QAAS,CAAC,QAAS,UAGjD,IASM1C,EATYC,aAAW,iBAAO,CAClC0C,MAAO,CACLC,QAAS,YAEXC,KAAM,CACJtB,UAAW,WAICuB,GAEVC,EAAajB,aACjB,SAAClF,GAAD,yBAAWA,EAAMmF,iBAAjB,iBAAW,EAAiBC,eAA5B,aAAW,EAA0Be,cAGvC,OAAKd,mBAASc,GAIVb,kBAAQa,GACH,2DAIP,eAACtD,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAxB,UACE,cAACF,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACE,cAAC7D,EAAA,EAAD,CAAY8D,QAAQ,KAApB,0BAEF,cAAC3B,EAAA,EAAD,CACEC,WAAS,EACTuB,WAAW,SACXpB,MAAI,EACJsB,GAAI,GACJvB,QAAS,EACTD,QAAQ,SANV,SAQE,cAACqD,EAAA,EAAD,CAAUC,MAAM,YAAhB,SACGF,GACCX,OAAOC,KAAKU,GAAY9D,KAAI,SAACqD,EAAKvD,GAChC,IAAMmE,EAAcH,EAAWhE,GAC/B,OACE,eAACoE,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAAC9F,EAAA,EAAD,CACE8D,QAAQ,QACR5D,MAAM,gBACNmD,UAAWX,EAAQ6C,KAHrB,mBAKMQ,KACFH,EAAYI,UAAUC,SACtB,gBAPJ,cASIL,EAAYM,QACR,UACAH,KACEH,EAAYO,QAAQF,SACpB,qBAKZ,eAACG,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAanG,MAAM,UAAnB,SACE,cAACoG,EAAA,EAAD,MAEF,cAACC,GAAA,EAAD,OAEF,cAACC,GAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAOC,UAAW,EAAGrD,UAAWX,EAAQ2C,MAAxC,UACE,cAACrF,EAAA,EAAD,CAAY8D,QAAQ,KAAKtC,UAAU,KAAnC,SACGoE,EAAYe,WAEf,cAAC3G,EAAA,EAAD,CAAYE,MAAM,gBAAlB,SACG0F,EAAYgB,QAEf,cAAC5G,EAAA,EAAD,UAAa4F,EAAYiB,qBAlC/B,wBAAoCpF,cAzBzC,8CCnBIqF,GA5BF,WACX,OACE,cAACjC,EAAA,EAAD,UACE,eAAC1C,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,EAAGqB,WAAW,SAAvC,UACE,cAACxB,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACE,cAACkD,EAAA,EAAD,CAAMC,QAAM,EAAZ,SACE,cAAC,EAAD,QAGJ,cAAC7E,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACE,cAACkD,EAAA,EAAD,CAAMC,QAAM,EAACJ,MAAM,QAAQtG,MAAO,CAAE2G,UAAW,QAA/C,SACE,cAACC,EAAA,EAAD,UACE,cAAC,EAAD,UAIN,cAAC/E,EAAA,EAAD,CAAMI,MAAI,EAACsB,GAAI,GAAf,SACE,cAACkD,EAAA,EAAD,CAAMC,QAAM,EAACJ,MAAM,aAAatG,MAAO,CAAE2G,UAAW,QAApD,SACE,cAACC,EAAA,EAAD,UACE,cAAC,GAAD,gBCgBCC,OA9Bf,WACE,IAAMhI,EAAWqF,aACf,SAAClF,GAAD,OAAWA,EAAMsD,MAAMzD,YAGnByD,EAAQwE,YAAe,CAC3BjE,QAAS,CACPC,KAAMjE,EAAW,OAAS,QAC1B6C,QAAS,CAAEqF,KAAM,WACjBC,UAAW,CAAED,KAAM,cAIvBhD,8BAAoB,CAAC,CAAEC,WAAY,iBAEnC,IAAM7E,EAAW+E,aACf,SAAClF,GAAD,yBAAWA,EAAMmF,iBAAjB,iBAAW,EAAiBC,eAA5B,aAAW,EAA0B6C,eAGvC,OACE,eAAC,IAAD,CAAkB3E,MAAOA,EAAzB,UACE,cAAC4E,EAAA,EAAD,IACA,sBAAKnE,UAAU,MAAf,UACE,cAAC,EAAD,CAAQ5D,SAAUA,IAClB,cAAC,GAAD,W,UCdKgI,GAAQC,YAAe,CAClCC,QAAS,CACPC,SAAUC,kBACVpD,UAAWqD,oBACXlF,MAAOmF,KCbSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCjBOC,GAAc,CACvBC,YAAY,EACZV,SAAU,CACRW,OAAO,GAAD,OAAKC,IACXC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,wCCGblB,IAASmB,cAAcV,GAAYT,UACnCA,IAASnD,YAET,IAAMuE,GAAW,CACfpB,aACAqB,OAAQZ,GAAYT,SACpBlI,SAAU+H,GAAM/H,SAChBwJ,mDACAC,wBAAwB,GAG1BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAU7B,MAAOA,GAAjB,SACE,cAAC,6BAAD,2BAAgCuB,IAAhC,aACE,cAAC,GAAD,WAINO,SAASC,eAAe,SFwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.07444c4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageContainer\":\"Splash_imageContainer__3UP6l\",\"after\":\"Splash_after__1x3DC\",\"header\":\"Splash_header__2og4m\",\"subHeader\":\"Splash_subHeader__2nnaE\"};","import { createSlice } from '@reduxjs/toolkit';\n\ninterface ThemeSlice {\n  darkMode: boolean;\n}\n\nconst initialState: ThemeSlice = { darkMode: true };\n\nconst counterSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    toggleDarkMode(state) {\n      state.darkMode = !state.darkMode;\n    },\n  },\n});\n\nexport const { toggleDarkMode } = counterSlice.actions;\nexport default counterSlice.reducer;\n","import {\n  AppBar,\n  Button,\n  Grid,\n  Hidden,\n  IconButton,\n  Switch,\n  Toolbar,\n  Typography,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  Divider,\n  ListSubheader,\n} from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { toggleDarkMode } from '../../features/theme/themeSlice';\nimport { NavigationItem } from '../../types/components';\n\ninterface INavbar {\n  navItems: NavigationItem[];\n}\n\nconst Navbar = ({ navItems }: INavbar) => {\n  const dispatch = useDispatch();\n  const [drawerOpen, setDrawerOpen] = useState(false);\n  const themeSwitch = (\n    <>\n      <Typography>Toggle dark/light mode</Typography>\n      <Switch\n        color=\"default\"\n        onChange={() => {\n          dispatch(toggleDarkMode());\n        }}\n      />\n    </>\n  );\n  return (\n    <AppBar position=\"static\" color=\"default\" style={{ marginBottom: '24px' }}>\n      <Toolbar>\n        <Hidden mdUp>\n          <IconButton\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => setDrawerOpen((prev) => !prev)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Drawer\n            anchor=\"left\"\n            open={drawerOpen}\n            onClose={() => setDrawerOpen((prev) => !prev)}\n          >\n            <List\n              style={{ width: '250px' }}\n              subheader={\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                  Navigation Menu\n                </ListSubheader>\n              }\n            >\n              <Divider />\n              {navItems &&\n                navItems.map((navItem) => {\n                  return (\n                    <ListItem button key={navItem.name}>\n                      <ListItemText primary={navItem.name} />\n                    </ListItem>\n                  );\n                })}\n              <Divider />\n              <ListItem>\n                <ListItemText primary=\"Toggle dark/light mode\" />\n                <ListItemSecondaryAction>\n                  <Switch\n                    color=\"default\"\n                    edge=\"end\"\n                    onChange={() => {\n                      dispatch(toggleDarkMode());\n                    }}\n                  />\n                </ListItemSecondaryAction>\n              </ListItem>\n            </List>\n          </Drawer>\n        </Hidden>\n        <Hidden only={['xs', 'sm']}>\n          <Grid container justify=\"center\" spacing={2}>\n            {navItems &&\n              navItems.map((navItem) => {\n                return (\n                  <Grid item key={navItem.name}>\n                    <Button color=\"default\">{navItem.name}</Button>\n                  </Grid>\n                );\n              })}\n          </Grid>\n          {themeSwitch}\n        </Hidden>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","export default __webpack_public_path__ + \"static/media/codePic.d3aeaee4.jpg\";","import { Grid, Button, Typography, makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport styles from './Splash.module.scss';\nimport codePic from '../../assets/codePic.jpg';\n\nconst Splash = () => {\n  const classes = makeStyles((theme) => {\n    return {\n      after: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: 'calc(55vh - 112px)',\n        color: '#fff',\n        display: 'block',\n        background:\n          theme.palette.type === 'dark'\n            ? 'rgba(0, 0, 0, 0.8)'\n            : 'rgba(0, 0, 0, 0.6)',\n      },\n    };\n  })();\n  return (\n    <div className={styles.imageContainer}>\n      <img className=\"h-100 w-100\" src={codePic} alt=\"Code\" />\n      <div className={classes.after}>\n        <Grid\n          container\n          spacing={3}\n          justify=\"center\"\n          alignItems=\"center\"\n          alignContent=\"center\"\n          className=\"h-100 w-100\"\n        >\n          <Grid item xs={12}>\n            <Typography variant=\"h1\" className={styles.header}>\n              Coltin Kifer\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            <Typography variant=\"h3\" className={styles.subHeader}>\n              Software Developer\n            </Typography>\n          </Grid>\n          <Grid item xs={12} style={{ marginTop: '16px' }}>\n            <Button\n              href=\"https://drive.google.com/file/d/1rwV-G0CitpfzOygqH4t3QYaHrDSMAr7R/view?usp=sharing\"\n              target=\"_blank\"\n              color=\"secondary\"\n              variant=\"contained\"\n            >\n              Open Resume\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n};\n\nexport default Splash;\n","import { Container, Grid, Typography } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { isLoaded, isEmpty, useFirestoreConnect } from 'react-redux-firebase';\nimport React from 'react';\nimport { RootState } from '../../app/store';\n\nexport type IAbout = {\n  paragraph?: string;\n}[];\n\nconst About = () => {\n  useFirestoreConnect([{ collection: 'about' }]);\n\n  const about = useSelector<RootState>(\n    (state) => state.firestore?.ordered?.about\n  ) as IAbout;\n\n  if (!isLoaded(about)) {\n    return <div>Loading...</div>;\n  }\n\n  if (isEmpty(about)) {\n    return <div>About is Empty</div>;\n  }\n\n  return (\n    <Container>\n      <Grid item xs={12}>\n        <Typography variant=\"h4\">About Me</Typography>\n      </Grid>\n      <Grid item xs={12}>\n        {about &&\n          Object.keys(about).map((key, id) => (\n            <div key={key} id={id.toString()}>\n              <Typography>&emsp;&emsp;{about[id].paragraph}</Typography>\n            </div>\n          ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default About;\n","import { Grid, makeStyles, Paper, Typography } from '@material-ui/core';\nimport { Room } from '@material-ui/icons';\nimport { useSelector } from 'react-redux';\nimport {\n  isLoaded,\n  isEmpty,\n  useFirestoreConnect,\n  OrderByOptions,\n} from 'react-redux-firebase';\nimport React from 'react';\nimport { RootState } from '../../app/store';\nimport {\n  Timeline,\n  TimelineItem,\n  TimelineContent,\n  TimelineOppositeContent,\n  TimelineSeparator,\n  TimelineDot,\n  TimelineConnector,\n} from '@material-ui/lab';\nimport dateformat from 'dateformat';\n\nexport type IExperience = {\n  description: string;\n  employer: string;\n  endDate: firebase.default.firestore.Timestamp;\n  startDate: firebase.default.firestore.Timestamp;\n  title: string;\n  order: number;\n  current?: boolean;\n}[];\n\nconst Experience = () => {\n  useFirestoreConnect([\n    { collection: 'experience', orderBy: ['order', 'asc'] as OrderByOptions },\n  ]);\n\n  const useStyles = makeStyles(() => ({\n    paper: {\n      padding: '6px 16px',\n    },\n    date: {\n      marginTop: '12px',\n    },\n  }));\n\n  const classes = useStyles();\n\n  const experience = useSelector<RootState>(\n    (state) => state.firestore?.ordered?.experience\n  ) as IExperience;\n\n  if (!isLoaded(experience)) {\n    return <div>Loading...</div>;\n  }\n\n  if (isEmpty(experience)) {\n    return <div>Experience List Is Empty</div>;\n  }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={12}>\n        <Typography variant=\"h4\">Experience</Typography>\n      </Grid>\n      <Grid\n        container\n        alignItems=\"center\"\n        item\n        xs={12}\n        spacing={2}\n        justify=\"center\"\n      >\n        <Timeline align=\"alternate\">\n          {experience &&\n            Object.keys(experience).map((key, id) => {\n              const currentItem = experience[id];\n              return (\n                <TimelineItem key={`timeline-item-${id}`}>\n                  <TimelineOppositeContent>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      className={classes.date}\n                    >\n                      {`${dateformat(\n                        currentItem.startDate.toDate(),\n                        'mmmm d, yyyy'\n                      )} - ${\n                        currentItem.current\n                          ? 'Present'\n                          : dateformat(\n                              currentItem.endDate.toDate(),\n                              'mmmm d, yyyy'\n                            )\n                      }`}\n                    </Typography>\n                  </TimelineOppositeContent>\n                  <TimelineSeparator>\n                    <TimelineDot color=\"primary\">\n                      <Room />\n                    </TimelineDot>\n                    <TimelineConnector />\n                  </TimelineSeparator>\n                  <TimelineContent>\n                    <Paper elevation={3} className={classes.paper}>\n                      <Typography variant=\"h6\" component=\"h1\">\n                        {currentItem.employer}\n                      </Typography>\n                      <Typography color=\"textSecondary\">\n                        {currentItem.title}\n                      </Typography>\n                      <Typography>{currentItem.description}</Typography>\n                    </Paper>\n                  </TimelineContent>\n                </TimelineItem>\n              );\n            })}\n        </Timeline>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Experience;\n","import { Card, CardContent, Container, Grid } from '@material-ui/core';\nimport React from 'react';\nimport Splash from '../../components/splash';\nimport About from '../about/About';\nimport Experience from '../experience';\n\nconst Home = () => {\n  return (\n    <Container>\n      <Grid container spacing={3} alignItems=\"center\">\n        <Grid item xs={12}>\n          <Card raised>\n            <Splash />\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          <Card raised title=\"About\" style={{ textAlign: 'left' }}>\n            <CardContent>\n              <About />\n            </CardContent>\n          </Card>\n        </Grid>\n        <Grid item xs={12}>\n          <Card raised title=\"Experience\" style={{ textAlign: 'left' }}>\n            <CardContent>\n              <Experience />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Home;\n","import { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { useFirestoreConnect } from 'react-redux-firebase';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport './App.scss';\nimport { RootState } from './app/store';\nimport Navbar from './components/navbar/Navbar';\nimport { NavigationItem } from './types/components';\nimport Home from './features/home/Home';\n\nfunction App() {\n  const darkMode = useSelector<RootState>(\n    (state) => state.theme.darkMode\n  ) as NavigationItem[];\n\n  const theme = createMuiTheme({\n    palette: {\n      type: darkMode ? 'dark' : 'light',\n      primary: { main: '#455A64' },\n      secondary: { main: '#00BCD4' },\n    },\n  });\n\n  useFirestoreConnect([{ collection: 'headerItems' }]);\n\n  const navItems = useSelector<RootState>(\n    (state) => state.firestore?.ordered?.headerItems\n  ) as NavigationItem[];\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <Navbar navItems={navItems} />\n        <Home />\n      </div>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { firebaseReducer } from 'react-redux-firebase';\nimport { firestoreReducer } from 'redux-firestore';\n// import { IAbout } from '../features/about/About';\nimport themeSlice from '../features/theme/themeSlice';\n\n// interface Schema {\n//   about: IAbout;\n// }\n\n// export interface RootState {\n//   firebase: FirebaseReducer.Reducer<{}, Schema>\n//   // firestore: F\n// }\n\n// const reducers: Reducer<RootState> = {\n//   firebase: firebaseReducer,\n//   firestore: firestoreReducer as Reducer<RootState>,\n//   router: routerReducer\n// };\n\nexport const store = configureStore({\n  reducer: {\n    firebase: firebaseReducer,\n    firestore: firestoreReducer,\n    theme: themeSlice,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nexport const environment = {\n    production: true,\n    firebase: {\n      apiKey: `${process.env.REACT_APP_FIREBASE_KEY}`,\n      authDomain: 'portfolio-a8df4.firebaseapp.com',\n      databaseURL: 'https://portfolio-a8df4.firebaseio.com',\n      projectId: 'portfolio-a8df4',\n      storageBucket: 'portfolio-a8df4.appspot.com',\n      messagingSenderId: '924371232404',\n      appId: '1:924371232404:web:ff5d898070c2426d'\n    }\n  };\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport firebase from 'firebase';\nimport './index.scss';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'firebase/firestore';\nimport { environment } from './environments/environments';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport { createFirestoreInstance } from 'redux-firestore';\n\nfirebase.initializeApp(environment.firebase);\nfirebase.firestore();\n\nconst rrfProps = {\n  firebase,\n  config: environment.firebase,\n  dispatch: store.dispatch,\n  createFirestoreInstance,\n  useFirestoreForProfile: true,\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ReactReduxFirebaseProvider {...rrfProps}>\n        <App />\n      </ReactReduxFirebaseProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}